<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout"
         xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <link rel="stylesheet" href="${rootURL}/plugin/jenkins-config-ops-plugin/css/nacos-config-index.css"
          type="text/css"/>

    <link rel="stylesheet" href="https://unpkg.com/codemirror@5.65.18/lib/codemirror.css"/>
    <link rel="stylesheet" href="https://unpkg.com/codemirror@5.65.18/addon/lint/lint.css"/>

    <div>
        <select multiple="multiple" size="5"
                onchange="updateSelectedDbs(this)">
            <j:forEach items="${it.getDbs()}" var="item" varStatus="status">
                <f:option value="${item}">${item}</f:option>
            </j:forEach>
        </select>
    </div>

    <div name="parameter" style="margin-top: 5px;">
        <input type="hidden" name="name" value="${h.escape(it.name)}"/>
        <div id="selectedDbsTab" class="tabBar">
        </div>
        <div name="value" id="dbConfigEditPanes">
        </div>
        <f:entry title="SQL" class="form-item-100">
            <div class="code-editor" id="dbPatchEditorContainer">
            </div>
        </f:entry>
    </div>

    <script src="https://unpkg.com/codemirror@5.65.18/lib/codemirror.js"/>
    <script src="https://unpkg.com/codemirror@5.65.18/mode/sql/sql.js"/>
    <script src="https://unpkg.com/codemirror@5.65.18/addon/lint/lint.js"/>

    <script type="text/javascript">
        <![CDATA[
        function updateSelectedDbs(select) {
            const tabBar = document.querySelector("#selectedDbsTab");
            const tabPanesDiv = document.querySelector("#dbConfigEditPanes");
            const optionValues = Array.from(select.selectedOptions).map(e => e.value)
            const optionNames = Array.from(select.selectedOptions).map(e => e.innerText)
            tabBar.innerHTML = ''
            optionValues.forEach((option, index) => {
                const tab = document.createElement("div");
                tab.className = "tab";
                if (index === 0) {
                    tab.classList.add("active");
                }
                // 创建监听
                tab.addEventListener("click", function (e) {
                    e.preventDefault();
                    document.querySelectorAll(".tab").forEach(tab => {
                        tab.classList.remove("active");
                    });
                    tab.classList.add("active");
                    const nextInput = document.querySelector("#dbSqlInput-" + option);
                    patchEditor.currentId = option;
                    patchEditor.setValue(nextInput.value);
                });

                const tabLink = document.createElement("a");
                tabLink.setAttribute("href", "#");
                tabLink.innerText = optionNames[index];
                tab.append(tabLink);
                tabBar.append(tab);
            });

            let optionValuesCopy = optionValues.slice();
            const children = tabPanesDiv.children;
            let needRemoveChildren = [];
            if (children && children.length > 0) {
                for (let i = 0; i < children.length; i++) {
                    const ele = children[i];
                    const check = ele.firstElementChild;
                    check.value = false;
                    for (let j = 0; j < optionValuesCopy.length; j++) {
                        const name = ele.getAttribute('name');
                        if (optionValuesCopy[j] === name) {
                            optionValuesCopy.splice(j, 1);
                            check.value = true;
                            break;
                        }
                    }
                    if (check.value === false) {
                        needRemoveChildren.push(ele);
                    }
                }
            }
            needRemoveChildren.forEach(e => {
                tabPanesDiv.removeChild(e);
            });

            // 余下的创建并追加到tabPanesDiv中
            for (let i = 0; i < optionValuesCopy.length; i++) {
                const option = optionValuesCopy[i];
                const div = document.createElement("div");
                div.setAttribute("name", option);

                div.style.display = "none";
                const checkInput = document.createElement("input");
                checkInput.type = "hidden";
                checkInput.value = "true";
                checkInput.name = "checked";

                const nextInput = document.createElement("input");
                nextInput.type = "hidden";
                nextInput.value = "";
                nextInput.name = "content";
                nextInput.id = "dbSqlInput-" + option;

                div.appendChild(checkInput);
                div.appendChild(nextInput);
                tabPanesDiv.appendChild(div);
            }

            if (optionValues.length > 0) {
                const nextInput = document.querySelector("#dbSqlInput-" + optionValues[0]);
                patchEditor.currentId = optionValues[0];
                patchEditor.setValue(nextInput.value)
            }

        }


        const patchEditor = CodeMirror(document.querySelector("#dbPatchEditorContainer"), {
            value: '',
            lineNumbers: true,
            gutters: ["CodeMirror-lint-markers"],
            lint: true,
            mode: 'sql',
            styleActiveLine: true,
            highlightDifferences: true,
            connect: "align"
        });

        patchEditor.on('change', function (cm, changeObj) {
            if (changeObj.origin === 'setValue') {
                cm.clearHistory();
                return;
            }
            const nextInput = document.querySelector("#dbSqlInput-" + cm.currentId);
            nextInput.value = cm.getValue();
        });
        ]]>
    </script>

</j:jelly>
