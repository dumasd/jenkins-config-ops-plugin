<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core"
         xmlns:f="/lib/form">
    <link rel="stylesheet" href="${rootURL}/plugin/jenkins-config-ops-plugin/css/nacos-config-index.css"
          type="text/css"/>

    <link rel="stylesheet"
          href="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/lib/codemirror.css"/>
    <link rel="stylesheet"
          href="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/merge/merge.css"/>
    <link rel="stylesheet"
          href="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/lint/lint.css"/>

    <div style="display: none;">
        <j:forEach items="${it.getItems()}" var="item" varStatus="status">
            <input id="nacosConfigCurrentInput-${item.id}" type="hidden" value="${item.content}" disabled="disabled"/>
            <input id="nacosConfigCurrentType-${item.id}" type="hidden" value="${item.format}" disabled="disabled"/>
            <input id="nacosConfigPatchInput-${item.id}" type="hidden" value="${item.patchContent()}"
                   disabled="disabled"/>
            <input id="nacosConfigDeleteInput-${item.id}" type="hidden" value="${item.deleteContent()}"
                   disabled="disabled"/>
        </j:forEach>
    </div>

    <f:entry title="${%ConfigurationSelect}">
        <div class="config-select">
            <select id="nacosConfigsSelect" multiple="multiple" size="${it.getItemSelectSize()}" disabled="true"
                    onchange="updateSelectedNacosConfigs(this)">
                <j:forEach items="${it.getItems()}" var="item" varStatus="status">
                    <f:option value="${item.id}">${item.fullName()}</f:option>
                </j:forEach>
            </select>
            <div class="select-all-btn custom-button blue" id="selectAllBtn">${%SelectAll}</div>
        </div>
    </f:entry>


    <div name="parameter" id="nacosConfigEditMain" style="margin-top: 5px;">
        <input type="hidden" name="name" value="${h.escape(it.name)}"/>
        <div id="selectedNacosConfigsTab" class="tabBar">
        </div>
        <div name="value" id="nacosConfigEditPanes">
        </div>
        <div class="operate-form">
            <div id="patchBtn" type="button" class="form-item-1 custom-button blue disabled">${%Patch}</div>
            <div id="deleteBtn" type="button" class="form-item-1 custom-button red disabled">${%Delete}</div>
            <div id="resetBtn" type="button" class="form-item-1 custom-button red disabled">${%Reset}</div>
        </div>

        <div class="operate-form" style="margin-top: 10px">
            <div style="width:48%;">
                <span class="title">${%PatchContent}</span>
                <div id="nacosConfigPatchEditorContainer" style="width:100%; margin-top: 5px">
                </div>
            </div>

            <div style="width:48%; margin-left: 10px">
                <span class="title">${%DeleteContent}</span>
                <div id="nacosConfigDeleteEditorContainer" style="width:100%; margin-top: 5px">
                </div>
            </div>
        </div>

        <f:entry title="${%ConfigurationChangeComparison}"
                 class="form-item-100">
            <div style="height: 450px" id="nacosConfigMergeEditorContainer">
            </div>
        </f:entry>
    </div>

    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/diff-match-patch/1.0.5/index.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/lib/codemirror.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/merge/merge.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/mode/yaml/yaml.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/mode/properties/properties.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/mode/javascript/javascript.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/mode/xml/xml.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/lint/lint.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/lint/json-lint.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/codemirror/5.65.19/addon/lint/yaml-lint.js"/>
    <script src="${rootURL}/plugin/jenkins-config-ops-plugin/dependencies/js-yaml/4.1.0/dist/js-yaml.min.js"/>

    <script type="text/javascript">
        <![CDATA[
        var BASE_URL = '${rootURL}/descriptorByName/io.jenkins.plugins.configops.nacos.NacosConfigAlterParameterDefinition'

        function onTabClick(option) {
            const currentInput = document.querySelector("#nacosConfigCurrentInput-" + option);
            const patchInput = document.querySelector("#nacosConfigPatchInput-" + option);
            const deleteInput = document.querySelector("#nacosConfigDeleteInput-" + option);

            const nextContentInput = document.querySelector("#nacosConfigNextInput-" + option);
            const nextFormatInput = document.querySelector("#nacosConfigNextFormatInput-" + option);

            editor.edit.currentId = option;
            editor.edit.setValue(nextContentInput.value)
            editor.rightOriginal().setValue(currentInput.value);

            const mode = nextFormatInput.value === "json" ? "javascript": nextFormatInput.value;
            editor.edit.setOption('mode', mode);
            editor.rightOriginal().setOption('mode', mode);

            patchEditor.currentId = option;
            patchEditor.setValue(patchInput.value);
            patchEditor.setOption('mode', mode);

            deleteEditor.currentId = option;
            deleteEditor.setValue(deleteInput.value);
            deleteEditor.setOption('mode', mode);
        }

        function updateSelectedNacosConfigs(select) {
            const tabBar = document.querySelector("#selectedNacosConfigsTab");
            const tabPanesDiv = document.querySelector("#nacosConfigEditPanes");
            const optionValues = Array.from(select.selectedOptions).map(e => e.value)
            const optionNames = Array.from(select.selectedOptions).map(e => e.innerText)
            tabBar.innerHTML = ''
            optionValues.forEach((option, index) => {
                const tab = document.createElement("div");
                tab.className = "tab";
                if (index === 0) {
                    tab.classList.add("active");
                }
                // 创建监听
                tab.addEventListener("click", function (e) {
                    e.preventDefault();
                    document.querySelectorAll(".tab").forEach(tab => {
                        tab.classList.remove("active");
                    });
                    tab.classList.add("active");
                    onTabClick(option);
                });

                const tabLink = document.createElement("a");
                tabLink.setAttribute("href", "#");
                tabLink.innerText = optionNames[index];
                tab.append(tabLink);
                tabBar.append(tab);
            });

            let optionValuesCopy = optionValues.slice();
            const children = tabPanesDiv.children;
            let needRemoveChildren = [];
            if (children && children.length > 0) {
                for (let i = 0; i < children.length; i++) {
                    const ele = children[i];
                    const check = ele.firstElementChild;
                    check.value = false;
                    for (let j = 0; j < optionValuesCopy.length; j++) {
                        const name = ele.getAttribute('name');
                        if (optionValuesCopy[j] === name) {
                            optionValuesCopy.splice(j, 1);
                            check.value = true;
                            break;
                        }
                    }
                    if (check.value === false) {
                        needRemoveChildren.push(ele);
                    }
                }
            }
            needRemoveChildren.forEach(e => {
                tabPanesDiv.removeChild(e);
            });

            // 余下的创建并追加到tabPanesDiv中
            for (let i = 0; i < optionValuesCopy.length; i++) {
                const option = optionValuesCopy[i];
                const formatInput = document.querySelector("#nacosConfigCurrentType-" + option);
                const currentInput = document.querySelector("#nacosConfigCurrentInput-" + option);
                const patchInput = document.querySelector("#nacosConfigPatchInput-" + option);
                const deleteInput = document.querySelector("#nacosConfigDeleteInput-" + option);
                const div = document.createElement("div");
                div.setAttribute("name", option);

                div.style.display = "none";
                const checkInput = document.createElement("input");
                checkInput.type = "hidden";
                checkInput.value = "true";
                checkInput.name = "checked";

                const nextContentInput = document.createElement("input");
                nextContentInput.type = "hidden";
                nextContentInput.value = currentInput.value;
                nextContentInput.name = "content";
                nextContentInput.id = "nacosConfigNextInput-" + option;

                const nextFormatInput = document.createElement("input");
                nextFormatInput.type = "hidden";
                nextFormatInput.value = formatInput.value;
                nextFormatInput.name = "format";
                nextFormatInput.id = "nacosConfigNextFormatInput-" + option;

                div.appendChild(checkInput);
                div.appendChild(nextContentInput);
                div.appendChild(nextFormatInput);
                tabPanesDiv.appendChild(div);

                fetch(BASE_URL + "/deleteAndPatchContent", {
                    method: "post",
                    headers: crumb.wrap({
                        "Content-Type": "application/x-www-form-urlencoded"
                    }),
                    body: objectToUrlFormEncoded({
                        format: formatInput.value,
                        content: currentInput.value,
                        patch: patchInput.value,
                        delete: deleteInput.value
                    })
                })
                        .then((response) => response.json())
                        .then((data) => {
                            nextContentInput.value = data.nextContent;
                            if (option === editor.edit.currentId) {
                                editor.edit.setValue(data.nextContent);
                                if (data.format && data.format.length > 0) {
                                    nextFormatInput.value = data.format;
                                    editor.edit.setOption('mode', data.format);
                                    editor.rightOriginal().setOption('mode', data.format);
                                }
                            }
                        })
                        .catch((err) => {
                            console.log(err);
                        });
            }

            if (optionValues.length > 0) {
                const option = optionValues[0];
                onTabClick(option);
            }
        }

        const editor = CodeMirror.MergeView(document.getElementById('nacosConfigMergeEditorContainer'), {
            value: '',
            orig: '',
            lineNumbers: true,
            gutters: ["CodeMirror-lint-markers"],
            lint: true,
            mode: '',
            styleActiveLine: true,
            highlightDifferences: true,
            connect: "align"
        });
        // 当前值设置为不可编辑
        editor.edit.setOption("readOnly", true);
        editor.rightOriginal().setOption("readOnly", true);

        editor.edit.on('change', function (cm, changeObj) {
            if (changeObj.origin === 'setValue') {
                cm.clearHistory();
                return;
            }
            const nextInput = document.querySelector("#nacosConfigNextInput-" + cm.currentId);
            nextInput.value = cm.getValue();
        });

        const patchEditor = CodeMirror(document.querySelector("#nacosConfigPatchEditorContainer"), {
            value: '',
            lineNumbers: true,
            gutters: ["CodeMirror-lint-markers"],
            lint: true,
            mode: 'text',
            styleActiveLine: true,
            highlightDifferences: true,
            connect: "align"
        });
        patchEditor.setSize(null, "240px");

        patchEditor.on('change', function (cm, changeObj) {
            if (changeObj.origin === 'setValue') {
                cm.clearHistory();
                return;
            }
            const patchInput = document.querySelector("#nacosConfigPatchInput-" + cm.currentId);
            patchInput.value = cm.getValue();
        });

        const deleteEditor = CodeMirror(document.querySelector("#nacosConfigDeleteEditorContainer"), {
            value: '',
            lineNumbers: true,
            gutters: ["CodeMirror-lint-markers"],
            lint: true,
            mode: 'text',
            styleActiveLine: true,
            highlightDifferences: true,
            readOnly: false,
            connect: "align"
        });
        deleteEditor.setSize(null, "240px");

        deleteEditor.on('change', function (cm, changeObj) {
            if (changeObj.origin === 'setValue') {
                cm.clearHistory();
                return;
            }
            const deleteInput = document.querySelector("#nacosConfigDeleteInput-" + cm.currentId);
            deleteInput.value = cm.getValue();
        });

        const selectAllBtn = document.getElementById("selectAllBtn");
        const patchBtn = document.getElementById("patchBtn");
        const deleteBtn = document.getElementById("deleteBtn");
        const resetBtn = document.getElementById("resetBtn");


        resetBtn.addEventListener("click", function () {
            if (resetBtn.classList.contains('disabled')) {
                return;
            }
            const currentId = editor.edit.currentId;
            if (!currentId) {
                console.log("Not selected for reset");
                return;
            }
            const currentInput = document.querySelector("#nacosConfigCurrentInput-" + currentId);
            const nextInput = document.querySelector("#nacosConfigNextInput-" + currentId);

            nextInput.value = currentInput.value;
            editor.edit.setValue(currentInput.value);
        });

        patchBtn.addEventListener("click", function () {
            if (patchBtn.classList.contains('disabled')) {
                return;
            }
            editNextContent("/patchContent", patchEditor.getValue());
        });

        deleteBtn.addEventListener("click", function () {
            if (deleteBtn.classList.contains('disabled')) {
                return;
            }
            editNextContent("/deleteContent", deleteEditor.getValue());
        });

        selectAllBtn.addEventListener("click", function () {
            const nacosConfigsSelect = document.querySelector("#nacosConfigsSelect");
            for (let option of nacosConfigsSelect.options) {
                option.selected = true;
            }
            updateSelectedNacosConfigs(nacosConfigsSelect);
        });

        function objectToUrlFormEncoded(parameters) {
            // https://stackoverflow.com/a/37562814/4951015
            // Code could be simplified if support for HTMLUnit is dropped
            // body: new URLSearchParams(parameters) is enough then, but it doesn't work in HTMLUnit currently
            let formBody = [];
            for (const property in parameters) {
                const encodedKey = encodeURIComponent(property);
                const encodedValue = encodeURIComponent(parameters[property]);
                formBody.push(encodedKey + "=" + encodedValue);
            }
            return formBody.join("&");
        }

        function editNextContent(path, edit) {
            if (!editor.edit.currentId) {
                console.log("Not selected for:", path);
                return;
            }
            const formatInput = document.querySelector("#nacosConfigCurrentType-" + editor.edit.currentId);
            const format = formatInput.value;
            const content = editor.edit.getValue();
            fetch(BASE_URL + path, {
                method: "post",
                headers: crumb.wrap({
                    "Content-Type": "application/x-www-form-urlencoded",
                }),
                body: objectToUrlFormEncoded({
                    format: format,
                    content: content,
                    edit: edit
                })
            })
                    .then((response) => response.json())
                    .then((data) => {
                        const nextContentInput = document.querySelector("#nacosConfigNextInput-" + editor.edit.currentId);
                        const nextFormatInput = document.querySelector("#nacosConfigNextFormatInput-" + editor.edit.currentId);

                        editor.edit.setValue(data.nextContent);
                        if (data.format && data.format.length > 0) {
                            nextFormatInput.value = data.format;
                            editor.edit.setOption('mode', data.format);
                            editor.rightOriginal().setOption('mode', data.format);
                        }

                        nextContentInput.value = data.nextContent;
                    })
                    .catch((err) => {
                        console.log(err);
                    });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const nacosConfigsSelect = document.querySelector("#nacosConfigsSelect");
            const patchBtn = document.getElementById("patchBtn");
            const deleteBtn = document.getElementById("deleteBtn");
            const resetBtn = document.getElementById("resetBtn");
            nacosConfigsSelect.disabled = false;

            patchBtn.classList.remove('disabled');
            deleteBtn.classList.remove('disabled');
            resetBtn.classList.remove('disabled');

            //patchBtn.disabled = false;
            //deleteBtn.disabled = false;
            //resetBtn.disabled = false;
        });
        ]]>
    </script>

</j:jelly>
